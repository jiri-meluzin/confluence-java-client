package com.github.crob1140.confluence;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.github.crob1140.confluence.auth.AuthMethod;
import com.github.crob1140.confluence.content.Content;
import com.github.crob1140.confluence.content.PageConfiguration;
import com.github.crob1140.confluence.content.TinyMCEContent;
import com.github.crob1140.confluence.content.UserSearchResponse;
import com.github.crob1140.confluence.errors.ConfluenceRequestException;
import com.github.crob1140.confluence.errors.ErrorResponse;
import com.github.crob1140.confluence.requests.ConfluenceRequest;
import com.github.crob1140.confluence.requests.CreateContentRequest;
import com.github.crob1140.confluence.requests.GetContentRequest;
import com.github.crob1140.confluence.requests.GetContentResponse;
import com.github.crob1140.confluence.requests.GetPageConfigurationRequest;
import com.github.crob1140.confluence.requests.GetTinyMCEContentRequest;
import com.github.crob1140.confluence.requests.PageConfigurationResponse;
import com.github.crob1140.confluence.requests.SearchUsersRequest;
import com.github.crob1140.confluence.requests.TinyMCEMacroPlaceholderRequest;
import com.github.crob1140.confluence.requests.TinyMCEMacroPlaceholderResponse;
import com.github.crob1140.confluence.requests.UpdateContentRequest;
import com.github.crob1140.confluence.requests.UpdatePageConfigurationRequest;

import jakarta.ws.rs.client.Entity;
import jakarta.ws.rs.client.Invocation;
import jakarta.ws.rs.client.WebTarget;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

/**
 * This class sends requests to a Confluence Cloud server.
 */
public class ConfluenceClient {

  private AuthMethod authMethod;
  private WebTarget wikiTarget;

  /**
   * <p>This constructor creates a client that can send requests to the Confluence Cloud server
   * located at the given target.</p>
   *
   * <p>The requests generated by a client created through this constructor do not include any
   * authorisation, and can therefore only be used to access publicly available content.</p>
   *
   * @param wikiTarget The resource target pointing to the location of the Confluence Cloud server.
   */
  public ConfluenceClient(WebTarget wikiTarget) {
    this.wikiTarget = wikiTarget;
  }

  /**
   * <p>This constructor creates a client that can send requests to the Confluence Cloud server
   * located at the given target.</p>
   *
   * <p>The requests generated by a client created through this constructor will use the
   * credentials defined by the given {@link AuthMethod}, and are therefore subject to the
   * permissions given to the user that corresponds to these credentials.</p>
   *
   * @param wikiTarget The resource target pointing to the location of the Confluence Cloud server.
   * @param authMethod The authorization method to use for all requests generated by this client.
   */
  public ConfluenceClient(WebTarget wikiTarget, AuthMethod authMethod) {
    this(wikiTarget);
    this.authMethod = authMethod;
  }

  /**
   * This method sends a request to the Confluence Cloud server to retrieve content matching the
   * conditions set in the given {@link GetContentRequest}.
   *
   * @param request The request defining the conditions for the Content that should be returned.
   * @return The content in the Conflucnce Cloud server that matches the conditions set in the given
   * {@link GetContentRequest}.
   * @throws ConfluenceRequestException if an error response is returned from the server
   */
  public List<Content> getContent(GetContentRequest request) throws ConfluenceRequestException {
	    return ((GetContentResponse) performRequest(request)).getResults();
	  }
  public TinyMCEContent getTinyMCEContent(GetTinyMCEContentRequest request) throws ConfluenceRequestException {
	    return ((TinyMCEContent) performRequest(request));
	  }

  public TinyMCEMacroPlaceholderResponse createTinyMCEPlaceHolder(TinyMCEMacroPlaceholderRequest request) throws ConfluenceRequestException {
	    return  (TinyMCEMacroPlaceholderResponse)performRequest(request);
	  }

  /**
   * This method sends a request to the Confluence Cloud server to update content the content as
   * defined in the given {@link UpdateContentRequest}.
   *
   * @param request The request defining what updates to apply, and which content to apply them to.
   * @return The new state of the content after the updates in the given {@link
   * UpdateContentRequest} were applied.
   * @throws ConfluenceRequestException if an error response is returned from the server
   */
  public Content updateContent(UpdateContentRequest request) throws ConfluenceRequestException {
    return (Content) performRequest(request);
  }

  /**
   * This method sends a request to the Confluence Cloud server to create the content defined in the
   * given {@link CreateContentRequest}.
   *
   * @param request The request defining the content that should be created, and what fields should
   * be returned in the response.
   * @return The content that was created
   * @throws ConfluenceRequestException If the server responses with an error status code
   */
  public Content createContent(CreateContentRequest request) throws ConfluenceRequestException {
    return (Content) performRequest(request);
  }
  public PageConfiguration updateConfiguration(UpdatePageConfigurationRequest request) throws ConfluenceRequestException {
	  return (PageConfiguration) performRequest(request);
  }

  public PageConfigurationResponse getConfiguration(GetPageConfigurationRequest request) throws ConfluenceRequestException {
	  return (PageConfigurationResponse) performRequest(request);
  }
  public UserSearchResponse searchUsers(SearchUsersRequest request) throws ConfluenceRequestException {
	  return (UserSearchResponse) performRequest(request);
  }

  /**
   * This method performs the given request and returns the servers response.
   *
   * @param request The request to perform
   * @throws ConfluenceRequestException If the server responses with an error status code
   */
  public Object performRequest(ConfluenceRequest request) throws ConfluenceRequestException {
    WebTarget endpointTarget = wikiTarget.path(request.getRelativePath());
    for (Entry<String, String> queryParam : request.getQueryParams().entrySet()) {
      endpointTarget = endpointTarget.queryParam(queryParam.getKey(), queryParam.getValue());
    }

    Invocation.Builder invocationBuilder = endpointTarget.request();
    Map<String, String> headers = getRequestHeaders(request);
    for (Entry<String, String> headerEntry : headers.entrySet()) {
      invocationBuilder.header(headerEntry.getKey(), headerEntry.getValue());
    }

    String methodName = request.getMethod();
    Response response;
    if (request.getBodyEntity().isPresent()) {
      Object bodyEntity = request.getBodyEntity().get();
      response = invocationBuilder.method(methodName, Entity.json(bodyEntity));
    } else {
      response = invocationBuilder.method(methodName);
    }

    int statusCode = response.getStatus();
    if (response.getStatus() >= 300) {
      String errorMsg;
      if (MediaType.APPLICATION_JSON_TYPE.equals(response.getMediaType())) {
        ErrorResponse errResponse = response.readEntity(ErrorResponse.class);
        errorMsg = errResponse.getMessage();
      } else {
        errorMsg = response.getStatusInfo().getReasonPhrase();
      }
      throw new ConfluenceRequestException(statusCode, errorMsg);
    }

    return response.readEntity(request.getReturnType());
  }

  /**
   * This method returns the headers that should be included in the given request.
   *
   * @param request The request to generate headers for
   * @return A map representing the headers for the request
   */
  private Map<String, String> getRequestHeaders(ConfluenceRequest request) {
    Map<String, String> requestHeaders = new HashMap<>();
    requestHeaders.put("Content-Type", request.getContentType().toString());
    requestHeaders.put("Accept", request.getAcceptedResponseType().toString());
    if (authMethod != null) {
      requestHeaders.put("Authorization", authMethod.getAuthHeaderValue());
    }
    return requestHeaders;
  }
}
